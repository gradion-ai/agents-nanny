{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Recent posts","text":""},{"location":"2025/08/06/agent-authorization-without-the-pain/","title":"Agent Authorization Without the Pain","text":"<p>Your agent needs to read from your Google Calendar and send emails through Gmail. Simple, right? Until you realize you need OAuth flows, token refresh logic, and secure credential storage. Multiply that by every API your agent needs.</p> <p>Connect your agents to 250+ APIs and 3000+ tools with model context protocol (MCP) and Composio. Composio handles authorization, remote MCP servers and tool execution, your application focuses on agentic reasoning and tool usage. </p> <p>Note</p> <p>I'm not affiliated with Composio, I'm just a happy user. What they do is IMO the right separation of concerns when building agentic applications.</p>"},{"location":"2025/08/06/agent-authorization-without-the-pain/#architecture","title":"Architecture","text":"<p>Your Application</p> <ul> <li>Agents connect to Composio MCP servers and use their tools</li> <li>Agents act on behalf of users that authorized API access</li> <li>Agents focus on reasoning and tool usage, not plumbing</li> </ul> <p>Composio Layer</p> <ul> <li>MCP servers act as protocol bridges to external APIs</li> <li>Each API has auth configs, with a connected account per user</li> <li>Auth tokens are stored securely, supporting OAuth2, API keys, etc.</li> </ul> <p>Key Benefits</p> <ul> <li>No OAuth flows or token management in your code</li> <li>Access 250+ APIs and 3000+ tools through MCP</li> <li>Clean separation between agent logic and API integration</li> </ul>"},{"location":"2025/08/06/agent-authorization-without-the-pain/#example","title":"Example","text":"Your browser does not support the video tag.  <p>The complete code is at github.com/krasserm/agent-auth. What follows is an overview of the key steps needed to authorize an agent to use Google Calendar on behalf of a user:</p> <p>Install the Composio Python library, used to access the Composio REST API.</p> <pre><code>pip install composio-client\n</code></pre> <p>Create an auth configuration for the googlecalendar toolkit, using <code>OAUTH2</code> as <code>authScheme</code>.</p> <pre><code>client = Composio(api_key=os.getenv(\"COMPOSIO_API_KEY\"))\n\nresponse = client.auth_configs.create(\n    toolkit={\"slug\": \"googlecalendar\"},\n    auth_config={\n        \"name\": \"calendar-example\", \n        \"type\": \"use_composio_managed_auth\",\n        \"authScheme\": \"OAUTH2\"\n    }\n)\nauth_config_id = response.auth_config.id\n</code></pre> <p>Add a connected account to the auth config and link a <code>user_id</code> to it. That's the id of a user managed by your application, not by Composio.</p> <pre><code>response = client.connected_accounts.create(\n    auth_config={\"id\": auth_config_id},\n    connection={\"user_id\": \"martin\"},\n)\n</code></pre> <p>Initiate the authorization process by redirecting to an OAuth consent screen in a browser window. After completion, the connected account is authorized to use Google Calendar on behalf of the user who granted access.</p> <pre><code>import webbrowser\n\nwebbrowser.open(response.connection_data.val.redirect_url)\n</code></pre> <p>Create an MCP server for the auth config created in step 2 and specify the tools that should be exposed.</p> <pre><code>result = client.mcp.create(\n    name=\"calendar-mcp-server\",\n    auth_config_ids=[auth_config_id],\n    allowed_tools=[\"GOOGLECALENDAR_FIND_EVENT\"]\n)\n</code></pre> <p>Create an MCP server URL that uses the connected account linked to <code>martin</code>.</p> <pre><code>mcp_url = result.mcp_url.replace(\"transport=sse\", \"user_id=martin\")\n# i.e. https://mcp.composio.dev/composio/server/&lt;uuid&gt;?user_id=martin\n# &lt;uuid&gt; is a string of pattern 12345678-90ab-cdef-1234-567890abcdef\n</code></pre> <p>Configure a Pydantic AI agent with the <code>mcp_url</code> so that it can use Google Calendar on behalf of the user who granted access in step 4.</p> <pre><code>from pydantic_ai import Agent\nfrom pydantic_ai.mcp import MCPServerStreamableHTTP\n\nagent = Agent(\n    'openai:o4-mini',\n    toolsets=[\n        MCPServerStreamableHTTP(mcp_url),  \n    ]\n)\n\nasync with agent:\n    result = await agent.run(\n        \"List my Sep 2025 calendar events\"\n    )\n\nprint(result.output)\n</code></pre>"},{"location":"archive/2025/","title":"August 2025","text":""},{"location":"category/agent-authorization/","title":"Agent authorization","text":""}]}